{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\r\n// Withdraw funds\r\n// Set a minimum unding value in usd\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n// importing aggregatorv3 interface which can hold any contract\r\nimport \"./PriceConverter.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n\r\n\r\n// creating custom error const less gas as require uses strings to revert and it const gases\r\nerror FundMe_NotOwner();\r\n\r\n// two keyword for optimal constant and immutable\r\ncontract FundMe {\r\n\r\n    // mentioning for which first argument will be library functions be used\r\n    using PriceConverter for uint256;\r\n\r\n  \r\n    uint256 public constant minimumUsd = 1 * 1e18; // minimum 0.006 wther\r\n    \r\n    // funder array\r\n    address[] public funders;\r\n    mapping(address => uint256) public addressToAmountFunded;\r\n    \r\n    // owner\r\n    // immutable is also gas efficient and use for variables where owner is set only once\r\n    address public immutable owner;\r\n    AggregatorV3Interface public priceFeed;\r\n    // use deploy contract to get owner address\r\n    constructor(address _api) {\r\n        owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(_api);\r\n    }\r\n    \r\n    // payable function allows sending wther to contract\r\n    function fund() public payable {\r\n        // chain link allows to get real world data\r\n        require(msg.value.getConversionRate(priceFeed) >= minimumUsd, \"Didn't Send enough!\");\r\n        // saving funders address\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender] = msg.value;\r\n       \r\n    }\r\n\r\n\r\n    function withdraw() public onlyOwner {\r\n        for(uint256 i = 0; i < funders.length; i++) {\r\n            address funderAddress = funders[i];\r\n            addressToAmountFunded[funderAddress] = 0;\r\n        }\r\n       \r\n        funders = new address[](0);\r\n        (bool CallSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(CallSuccess, \"Call Failed\");\r\n    }\r\n\r\n    function CheaperWithdraw() public onlyOwner {\r\n        address[] memory m_funders = funders;\r\n        for(uint256 i = 0; i < m_funders.length; i++) {\r\n            address funderAddress = m_funders[i];\r\n            addressToAmountFunded[funderAddress] = 0;\r\n        }\r\n       \r\n        funders = new address[](0);\r\n        (bool CallSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(CallSuccess, \"Call Failed\");\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if(msg.sender != owner) {revert FundMe_NotOwner();}\r\n        _;\r\n    }\r\n    receive() external payable{\r\n        fund();\r\n    } \r\n\r\n    fallback() external payable{\r\n        fund();\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// library for math functions\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n        \r\n        (, int price,,,) = priceFeed.latestRoundData();\r\n       \r\n        return uint256(price);\r\n    }\r\n\r\n\r\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n       \r\n        uint256 ethAmountUsd = ethPrice * ethAmount / 1e8;\r\n        return ethAmountUsd;\r\n    }\r\n\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}